@page "/transaction-categories"
@using BlazorBudget.Wasm.Abstractions
@using BlazorBudget.Wasm.Services
@using BlazorBudget.Wasm.Store
@using BlazorBudget.Wasm.Views
@using Fluxor
@using Fluxor.Blazor.Web.Components

@inject IState<CategoryState> CategoryState
@inject IDialogService DialogService
@inject IDispatcher Dispatcher
@inject IColorService ColorService

@inherits FluxorComponent

<MudContainer MaxWidth="MaxWidth.Medium" Class="my-4">
    <MudText Typo="Typo.h5">Manage Transaction Categories</MudText>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddCategory">
        Add New Transacation Category
    </MudButton>
    <MudPaper Width="100%">
        @if (CategoryState.Value.IsLoading)
        {
            <MudProgressCircular Color="Color.Primary" />
        }
        else if (CategoryState.Value.Categories != null && CategoryState.Value.Categories.Any())
        {
            <MudTable Items="CategoryState.Value.Categories" Striped="true" Bordered="true">
                <HeaderContent>
                    <MudTh>Category Name</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd><MudChip Color="Color.Primary" Style="@GetChipStyle(context)">@context.Name</MudChip></MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => EditCategory(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="@(() => DeleteCategory(context.Id))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudText Typo="Typo.body1">No categories found. Start by adding a new category.</MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new FetchCategoriesAction());
        base.OnInitialized();
    }

    void AddCategory()
    {
        var dialog = DialogService.Show<AddEditCategoryDialog>("Create New Transaction Category");
        var result = dialog.Result;

        result.ContinueWith(result =>
        {
            if (!result.Result.Canceled)
            {
                var category = (Category)result.Result.Data;
                Dispatcher.Dispatch(new AddOrUpdateCategoryAction { Category = category });
            }
        }, TaskScheduler.Current);
    }

    void EditCategory(Category category)
    {
    }

    string GetChipStyle(Category category)
    {
        var textColor = ColorService.GetTextColor(category.Color);
        return $"background-color: {category.Color}; color: {textColor}";
    }

    void DeleteCategory(Guid? categoryId)
    {
        Dispatcher.Dispatch(new DeleteCategoryAction { CategoryId = categoryId });
    }
}