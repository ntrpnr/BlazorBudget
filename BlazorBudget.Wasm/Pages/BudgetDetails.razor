@page "/budget-details/{BudgetId:guid}"
@using BlazorBudget.Wasm.Abstractions
@using BlazorBudget.Wasm.Services
@using BlazorBudget.Wasm.Store
@using BlazorBudget.Wasm.Views
@using Fluxor
@using Fluxor.Blazor.Web.Components

@inject IState<BudgetState> BudgetState
@inject IState<CategoryState> CategoryState

@inject IDispatcher Dispatcher
@inject IDialogService DialogService
@inject IColorService ColorService
@inherits FluxorComponent

<MudContainer MaxWidth="MaxWidth.Medium" Class="my-4">
    <MudText Typo="Typo.h5">Budget Details for @budget?.Month?.ToString("MMMM yyyy")</MudText>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddTransaction">
        Add Transaction
    </MudButton>

    <MudPaper Class="mt-3 p-3">
        @if (BudgetState.Value.IsLoading)
        {
            <MudProgressCircular Color="Color.Primary" />
        }
        else if (budget != null && budget.Transactions.Any())
        {
            <MudTable Items="budget.Transactions" Striped="true" Bordered="true">
                <HeaderContent>
                    <MudTh>Date</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Amount</MudTh>
                    <MudTh>Category</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Date?.ToString("dd MMM yyyy")</MudTd>
                    <MudTd>@context.Description</MudTd>
                    <MudTd>@context.Amount?.ToString("C")</MudTd>
                    <MudTd>
                        @if(CategoryState.Value.IsLoading)
                        {
                            <MudProgressCircular Color="Color.Primary" />
                        }
                        else
                        {
                            <MudChip Size="Size.Small" Color="Color.Primary" Style="@GetChipStyle(CategoryState.Value.Categories.FirstOrDefault(c => c.Id == context.CategoryId))">
                                @CategoryState.Value.Categories.FirstOrDefault(c => c.Id == context.CategoryId)!.Name
                            </MudChip>
                        }                        
                    </MudTd>
                    <MudTd>@context.Type</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => EditTransaction(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="@(() => DeleteTransaction(context.Id))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudText Typo="Typo.body1">No transactions found. Start by adding a new transaction.</MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public Guid BudgetId { get; set; }
    private Budget budget => BudgetState.Value.Budgets.FirstOrDefault(b => b.Id == BudgetId);

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new FetchCategoriesAction { });
        Dispatcher.Dispatch(new FetchBudgetsAction { UserId = 1 });
        base.OnInitialized();
    }

    private void AddTransaction()
    {
        var dialog = DialogService.Show<AddEditTransactionDialog>("Add Transaction");
        var result = dialog.Result;

        result.ContinueWith(task =>
        {
            if (!task.Result.Canceled)
            {
                var newTransaction = (Transaction)task.Result.Data;
                Dispatcher.Dispatch(new AddOrUpdateBudgetAction { Budget = budget with { Transactions = budget.Transactions.Append(newTransaction).ToList() } });
            }
        }, TaskScheduler.Current);
    }

    private string GetChipStyle(Category category)
    {
        if (category == null)
        {
            return string.Empty;
        }
        var textColor = ColorService.GetTextColor(category.Color);
        return $"background-color: {category.Color}; color: {textColor}";
    }


    private void EditTransaction(Transaction transaction)
    {
        // Code to open dialog and edit a transaction
    }

    private void DeleteTransaction(Guid transactionId)
    {
        // Code to dispatch an action to delete a transaction
    }
}
